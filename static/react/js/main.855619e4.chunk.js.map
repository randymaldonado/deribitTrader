{"version":3,"sources":["components/Landing.js","components/Config.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Landing","Config","useState","apiKey","setApiKey","apiSecret","setApiSecret","completed","setCompleted","to","className","Form","onSubmit","e","preventDefault","key","secret","data","method","headers","body","JSON","stringify","fetch","then","res","json","catch","err","console","log","saveConfig","Group","Label","Control","type","placeholder","value","onChange","target","Button","variant","NavBar","Navbar","bg","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8QAUeA,MARf,WACE,OACE,0D,gCC+DWC,MA5Df,WAAmB,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAEkBF,mBAAS,IAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGkBJ,oBAAS,GAH3B,mBAGTK,EAHS,KAGEC,EAHF,KAiBhB,OAAID,EACK,kBAAC,IAAD,CAAUE,GAAG,MAIpB,6BACE,wBAAIC,UAAU,gBAAd,iBACA,kBAACC,EAAA,EAAD,CAAMC,SAAW,SAAAC,GACfA,EAAEC,iBApBW,SAACC,EAAKC,GACvB,IAAMC,EAAO,CACXC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAACnB,OAAQY,EAAKV,UAAWW,KAGhDO,MAAM,eAAgBN,GACnBO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAYxBG,CAAW5B,EAAQE,GACnBG,GAAa,KAGb,kBAACG,EAAA,EAAKqB,MAAN,CAAYtB,UAAU,iBACpB,kBAACC,EAAA,EAAKsB,MAAN,gBACA,kBAACtB,EAAA,EAAKuB,QAAN,CACEC,KAAK,OACLC,YAAY,gBACZC,MAAOlC,EACPmC,SAAU,SAAAzB,GAAC,OAAIT,EAAUS,EAAE0B,OAAOF,WAGtC,kBAAC1B,EAAA,EAAKqB,MAAN,CAAYtB,UAAU,iBACpB,kBAACC,EAAA,EAAKsB,MAAN,mBACA,kBAACtB,EAAA,EAAKuB,QAAN,CACEC,KAAK,OACLC,YAAY,mBACZC,MAAOhC,EACPiC,SAAU,SAAAzB,GAAC,OAAIP,EAAaO,EAAE0B,OAAOF,WAGzC,kBAACG,EAAA,EAAD,CACEL,KAAK,SACLzB,UAAU,gBACV+B,QAAQ,WAHV,a,gBCpCOC,MAff,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOH,QAAQ,QACxB,kBAACE,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,iBACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKzC,UAAU,WACb,kBAACyC,EAAA,EAAIC,KAAL,CAAUN,KAAK,WAAf,cCSKO,MAZf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,IAAIC,UAAWxD,IACjC,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,UAAUC,UAAWvD,OCF3BwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"js/main.855619e4.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Landing() {\n  return (\n    <div>\n      Welcome!!! to the Landng\n    </div>\n  );\n}\n\nexport default Landing;\n","import React, { useState } from 'react';\nimport '../css/config.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from \"react-router-dom\";\n\n\nfunction Config() {\n  const [apiKey, setApiKey] = useState('');\n  const [apiSecret, setApiSecret] = useState('');\n  const [completed, setCompleted] = useState(false)\n\n  const saveConfig = (key, secret) => {\n    const data = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({apiKey: key, apiSecret: secret})\n    };\n\n    fetch('/api/setKeys', data)\n      .then(res => res.json())\n      .catch(err => console.log(err))\n  };\n\n  if (completed) {\n    return <Redirect to='/'/>\n  }\n\n  return (\n    <div>\n      <h1 className='config-title'>Configuration</h1>\n      <Form onSubmit={ e => {\n        e.preventDefault();\n        saveConfig(apiKey, apiSecret)\n        setCompleted(true)\n        }}\n      >\n        <Form.Group className='text-bar-type'>\n          <Form.Label>API KEY</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter API KEY\"\n            value={apiKey}\n            onChange={e => setApiKey(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group className='text-bar-type'>\n          <Form.Label>API SECRET</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter API SECRET\"\n            value={apiSecret}\n            onChange={e => setApiSecret(e.target.value)}\n          />\n        </Form.Group>\n        <Button\n          type=\"submit\"\n          className='submit-button'\n          variant=\"primary\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default Config;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav'\n\nfunction NavBar() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"/\">deribitTrader</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/config\">Config</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Landing from './components/Landing';\nimport Config from './components/Config';\nimport NavBar from './components/Navbar';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar/>\n        <Route exact path='/' component={Landing}/>\n        <Route exact path='/config' component={Config}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}