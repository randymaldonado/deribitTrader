{"version":3,"sources":["components/DashboardElements/Title.js","components/DashboardElements/Profit.js","components/DashboardElements/Leverage.js","components/DashboardElements/Trades.js","components/Landing.js","components/Config.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","Typography","component","variant","color","gutterBottom","children","useStyles","makeStyles","profitBTCContext","flex","Profit","classes","Fragment","data","profitUSD","toString","className","profitBTC","Leverage","createData","id","datetime","instrument","side","amount","price","transactionFee","rows","preventDefault","event","theme","seeMore","marginTop","spacing","Trades","Table","size","TableHead","TableRow","TableCell","align","TableBody","map","row","key","Link","href","onClick","root","display","content","flexGrow","height","overflow","container","paddingTop","paddingBottom","paper","padding","flexDirection","fixedHeight","Landing","React","useState","profit","leverage","trades","state","setState","useEffect","socketIOClient","on","fixedHeightPaper","clsx","Container","maxWidth","Grid","item","xs","md","lg","Paper","Config","apiKey","setApiKey","apiSecret","setApiSecret","completed","setCompleted","to","Form","onSubmit","e","secret","method","headers","body","JSON","stringify","fetch","then","res","json","catch","err","console","log","saveConfig","Group","Label","Control","type","placeholder","value","onChange","target","Button","NavBar","tradingStatus","setTradingStatus","tradingStatusValue","setTradingStatusValue","tradingStatusButtonCSS","setTradingStatusButtonCSS","Navbar","bg","Brand","Toggle","aria-controls","Collapse","Nav","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"js/main.11b693d5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Title(props) {\nreturn (\n  <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n    {props.children}\n  </Typography>\n);\n}\n\nTitle.propTypes = {\nchildren: PropTypes.node,\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Title from './Title';\n\nconst useStyles = makeStyles({\n  profitBTCContext: {\n    flex: 1,\n  },\n});\n\nconst convertToStringProfitUSD = (usd) => {\n  // Could use '$' + usd, but could lead to type errors\n  return \"$\" + usd.toString()\n}\n\nconst convertToStringProfitBTC = (btc) => {\n  return btc.toString() + ' BTC'\n}\n\nexport default function Profit(props) {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Title>Session Profit/Loss</Title>\n      <Typography component=\"p\" variant=\"h4\">\n        {convertToStringProfitUSD(props.data.profitUSD)}\n      </Typography>\n      <Typography color=\"textSecondary\" className={classes.profitBTCContext}>\n        {convertToStringProfitBTC(props.data.profitBTC)}\n      </Typography>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Title from './Title';\n\nexport default function Leverage(props) {\n  return (\n    <React.Fragment>\n      <Title>Session Leverage</Title>\n      <Typography component=\"p\" variant=\"h4\">\n        {props.data}\n      </Typography>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\n\n// Generate Order Data\nfunction createData(id, datetime, instrument, side, amount, price, transactionFee) {\n  return { id, datetime, instrument, side, amount, price, transactionFee };\n}\n// need to create rows from fetching data from API call\nconst rows = [\n  createData(74956848, '2019-08-04 08:00:00 GMT', 'BTC-PERPETUAL', 'Close Sell', 6400, 10881, 0.001415),\n  createData(74956847, '2019-08-04 07:00:00 GMT', 'BTC-PERPETUAL', 'Open Buy', 3200, 10651, 0.001415),\n  createData(74956846, '2019-08-04 06:00:00 GMT', 'BTC-PERPETUAL', 'Open Buy', 3200, 10688, 0.001415),\n  createData(74956845, '2019-08-04 05:00:00 GMT', 'BTC-PERPETUAL', 'Close Sell', 3200, 10651, 0.001415),\n  createData(74956844, '2019-08-04 04:00:00 GMT', 'BTC-PERPETUAL', 'Open Buy', 3200, 10601, 0.001415)\n];\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function Trades(props) {\n  const classes = useStyles();\n  // const rows = props.data // change to Trades(props)\n  return (\n    <React.Fragment>\n      <Title>Recent Trades</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Datetime</TableCell>\n            <TableCell>Instrument</TableCell>\n            <TableCell>Side</TableCell>\n            <TableCell>Amount</TableCell>\n            <TableCell>Price</TableCell>\n            <TableCell align=\"right\">Transaction Fee</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.id}>\n              <TableCell>{row.datetime}</TableCell>\n              <TableCell>{row.instrument}</TableCell>\n              <TableCell>{row.side}</TableCell>\n              <TableCell>{row.amount}</TableCell>\n              <TableCell>{row.price}</TableCell>\n              <TableCell align=\"right\">{row.transactionFee}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n          See more trades\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport socketIOClient from \"socket.io-client\";\nimport { makeStyles } from '@material-ui/core/styles';\n// import CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Profit from './DashboardElements/Profit'\nimport Leverage from './DashboardElements/Leverage'\nimport Trades from './DashboardElements/Trades'\n\nconst ENDPOINT = \"http://127.0.0.1:5000\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex'\n  },\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto'\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column'\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nfunction Landing() {\n  const initialState = {\n    profit: {\n      profitUSD: 0.00,\n      profitBTC: 0.000,\n    },\n    leverage: 0.00,\n    trades: {}\n  };\n  const [state, setState] = React.useState(initialState);\n\n  React.useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on('UPDATE_STATE', function(data){\n      setState(data)\n    });\n  }, []);\n\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n  return (\n    <div className={classes.root}>\n      <main className={classes.content}>\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={4} lg={6}>\n              <Paper className={fixedHeightPaper}>\n                <Profit data={state.profit}/>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={4} lg={6}>\n              <Paper className={fixedHeightPaper}>\n                <Leverage data={state.leverage}/>\n              </Paper>\n            </Grid>\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <Trades data={state.trades} />\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </div>\n  );\n}\n\nexport default Landing;\n","import React, { useState } from 'react';\nimport '../css/config.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from \"react-router-dom\";\n\n\nfunction Config() {\n  const [apiKey, setApiKey] = useState('');\n  const [apiSecret, setApiSecret] = useState('');\n  const [completed, setCompleted] = useState(false)\n\n  const saveConfig = (key, secret) => {\n    const data = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({apiKey: key, apiSecret: secret})\n    };\n\n    fetch('/api/setKeys', data)\n      .then(res => res.json())\n      .catch(err => console.log(err))\n  };\n\n  if (completed) {\n    return <Redirect to='/'/>\n  }\n\n  return (\n    <div>\n      <h1 className='config-title'>Configuration</h1>\n      <Form onSubmit={ e => {\n        e.preventDefault();\n        saveConfig(apiKey, apiSecret)\n        setCompleted(true)\n        }}\n      >\n        <Form.Group className='text-bar-type'>\n          <Form.Label>API KEY</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter API KEY\"\n            value={apiKey}\n            onChange={e => setApiKey(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group className='text-bar-type'>\n          <Form.Label>API SECRET</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter API SECRET\"\n            value={apiSecret}\n            onChange={e => setApiSecret(e.target.value)}\n          />\n        </Form.Group>\n        <Button\n          type=\"submit\"\n          className='submit-button'\n          variant=\"primary\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default Config;\n","import React, { useState } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav'\nimport Button from 'react-bootstrap/Button';\n\nfunction NavBar() {\n  const [tradingStatus, setTradingStatus] = useState(false)\n  const [tradingStatusValue, setTradingStatusValue] = useState('Run')\n  const [tradingStatusButtonCSS, setTradingStatusButtonCSS] = useState('blue')\n\n  const onClick = () => {\n    if (!tradingStatus) {\n      setTradingStatus(true)\n      setTradingStatusValue('Stop')\n      setTradingStatusButtonCSS('red')\n    } else {\n      setTradingStatus(false)\n      setTradingStatusValue('Run')\n      setTradingStatusButtonCSS('blue')\n    }\n\n\n  };\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"/\">deribitTrader</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/config\">Config</Nav.Link>\n        </Nav>\n        <Button onClick={onClick} className={tradingStatusButtonCSS}>\n          {tradingStatusValue}\n        </Button>\n      </Navbar.Collapse>\n    </Navbar>\n\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Landing from './components/Landing';\nimport Config from './components/Config';\nimport NavBar from './components/Navbar';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar/>\n        <Route exact path='/' component={Landing}/>\n        <Route exact path='/config' component={Config}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}